WebSocket是一种网络通讯协议，是单个TCP连接上面进行全双工通讯协议
http协议：客户端->服务端 一次的连接 客户端定时发送请求到服务器，不是实时性的。
WebSocket协议：
  第一部分：握手协议，客户端给服务端发送协议，标识协议升级为websocket，101状态码
  第二部分：数据交互，可以全双工的发送消息。数据传输的过程
  
  connection Upgrade：标识http请求是一个协议升级请求
  sec-WebSocket-Key： 使用base64编码24位的随机的字符串，要求服务端接受客户端HTTP协议升级的证明，要求服务端响应一个加密的头信息应答。
  协议的扩展类型：客户端和服务端的类型，
  ----------------------------------------------------------
  客户端（前端操作）：
  var ws = new WebSocket(ws://ip:端口号)
  websocket：事件，onopen（建立时候触发）,onmessage（客户端接受服务端数据触发）,onerror（通信错误触发）,oncloes（连接关闭触发）
  websocket方法：send()方法 使用连接发送消息
  ws.onopen = function(){}  绑定开启事件，在用户登录之后就是在线得状态     ws.onclose = function(){} 开启事件，显示离线信息，当断开事件得时候触发
  
  ------------------------------------------------------------
  Tomcat7.5支持WebSocket，并且实现了java WebSocket的规范
  enpoint对象，是服务端的连接对象，和客户端的唯一连接。数据交互。
  两种方式定义entPoint：javax.websocket.Endpoint实现方法   注解式定义一个pojo，使用@ServiceEndpoint
  
  接受消息，发送数据的方法，通过Session添加MessageHandler消息处理器接收消息，，当采用注解的方式定义EndPoint的时候可以通过@OnMessage注解接收消息
  发送消息：RemoteEndPoint完成，实例是Session维护，根据使用的i情况，可以通过Session维护
  
  @ServerEndpoint("char")
  @component
public class charWebSocket {
    
    @OnOpen
    public void onOpen(Session session, EndpointConfig endpointConfig){

    }

    @OnMessage
    public void OnMessage(String msg,Session session){

    }
    @OnClose
    public void OnClose(Session session, EndpointConfig endpointConfig){

    }

}
------------------------配置文件
//注入bean对象
@Configuration
public class WebSocketCharConfig {
    @Bean
    public ServerEndpointExporter serverEndpointExporter(){
        return new ServerEndpointExporter();
    }
}

  
  
 
