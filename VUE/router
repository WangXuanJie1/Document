前端路由：页面之间的跳转	前后不分离，某一个方法传输的是数据就是一个接口，传输的是页面就是路由

前后端分离页面，spa，前端只有一个页面，避免了多个页面操作DOM的页面消耗，整个页面的所有接口请求。不会应为页面的加载而切换整个页面

前端路由是hash模式和

hash（地址栏带#）：浏览器中一部分的切换，不更新所有的页面内容。页面跳转使用<a href="#/home">标签。    通过设置location.hash的值来监听页面的变化
浏览器底层使用hashchange方法，监听hash值发生改变，给windows监听，windows.addEventListener('hashchnage',function(){	console.log()	})

#就是当前路径之下的

history：使用原生路由，当url发生变化的时候，通过hsitory.pushState方法更新浏览器url(推送状态，去缓存浏览记录。并且不会引起浏览器刷新，可以进行回退)
replaceState：不保留之前的历史栈，进入保留replaceState的url，并且不会刷新浏览器。


修改的是loation.pathname
e.preventDefault()：停止点击对象的默认动作				将之间的点击事件替换为新的点击事件，往历史记录添加pushState，并且调用路由更新
history.pushState(null,'',el.href)						第一个参数是需要携带的路由参数，第二个参数是标题有兼容的部分，第三个是url
获取到改变，更新页面信息


创建路由的方法：
  1.创建路由器实例，初始化实例的状态和历史记录
  2.配置路由表，通过传入的路由配置参数，将路由表中每个词条解析成RouteRecord对象，包含路由路径，视图组件，子路由，元数据
  3.注册路由守卫：可以注册任意数量的全局和局部的路由守卫函数，用于在路由导航过程中执行一些额外的逻辑。这些守卫函数可以用于验证用户权限、跳转到其他页面、拦截路由等。
  4.返回路由器实例：最后，将创建好的路由器实例返回给调用者，以便于在 Vue 应用程序中使用。



ts就是加强版本的js，强制性的检测，抛出的接口限制和接口的类型。


